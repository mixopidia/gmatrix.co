# Cursor Rules for Crypo - Cryptocurrency Exchange Dashboard React App

## Project Context
This is a React-based cryptocurrency exchange dashboard application built with Create React App. The project includes:
- React 17.0.2 with React Router DOM for navigation
- Bootstrap 4.6.0 and React Bootstrap for UI components
- SASS for styling with custom SCSS modules
- TradingView integration for charts
- Theme switching (dark/light mode) functionality
- Multiple pages: exchange, markets, wallet, profile, settings, etc.

## Code Style & Conventions
- Use functional components with hooks (React 17+)
- Follow React best practices and conventions
- Use Bootstrap classes for responsive design
- Implement proper error handling and loading states
- Maintain consistent naming conventions (camelCase for variables, PascalCase for components)

## File Structure Guidelines
- Components go in `src/components/`
- Pages go in `src/pages/`
- Styles go in `src/assets/scss/`
- Context providers go in `src/context/`
- Static assets go in `public/img/`

## Component Development Rules
- Always include proper PropTypes or TypeScript types
- Use meaningful component and prop names
- Implement proper error boundaries where needed
- Follow the existing theme context pattern for dark/light mode
- Use React Router for navigation between pages

## Styling Guidelines
- Use SASS/SCSS for custom styling
- Follow the existing SCSS module structure
- Maintain responsive design principles
- Use Bootstrap utilities when possible
- Keep custom CSS minimal and focused

## Trading/Financial Features
- Implement proper data validation for financial inputs
- Use appropriate number formatting for currency values
- Handle real-time data updates efficiently
- Implement proper error handling for API calls
- Follow security best practices for financial applications

## Performance Considerations
- Implement proper React.memo() for expensive components
- Use lazy loading for routes where appropriate
- Optimize bundle size by avoiding unnecessary dependencies
- Implement proper loading states and error handling

## Testing Guidelines
- Write unit tests for utility functions
- Test component rendering and user interactions
- Mock external dependencies appropriately
- Follow React Testing Library best practices

## Security Best Practices
- Validate all user inputs
- Sanitize data before rendering
- Use HTTPS in production
- Implement proper authentication flows
- Follow OWASP guidelines for web applications

## API Integration
- Use proper error handling for API calls
- Implement loading states
- Cache data appropriately
- Handle network errors gracefully
- Use environment variables for API endpoints

## Accessibility
- Use semantic HTML elements
- Implement proper ARIA labels
- Ensure keyboard navigation works
- Maintain proper color contrast ratios
- Test with screen readers

## Browser Compatibility
- Support modern browsers (Chrome, Firefox, Safari, Edge)
- Use polyfills when necessary
- Test responsive design across devices
- Ensure functionality works on mobile devices
